name: NSE Scripts CI - sirius-nse

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate-scripts:
    name: Validate Scripts & Manifest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install AJV CLI for JSON Schema validation
        run: npm install -g ajv-cli
      - name: Validate manifest.json
        run: |
          if [ -f "manifest.json" ] && [ -f "schemas/manifest.schema.json" ]; then
            ajv validate -s schemas/manifest.schema.json -d manifest.json
            echo "manifest.json validation successful (or schema not found)."
          elif [ -f "manifest.json" ]; then
            echo "schemas/manifest.schema.json not found, skipping manifest.json validation."
            # Optionally, attempt basic JSON linting if no schema
            # npm install -g jsonlint
            # jsonlint manifest.json --quiet
          else
            echo "manifest.json not found, skipping validation."
          fi

      - name: Setup Luacheck
        run: |
          sudo apt-get update
          sudo apt-get install -y luarocks
          sudo luarocks install luacheck
      - name: Lint Lua Scripts
        # This command will fail if luacheck finds issues.
        # Consider adding a .luacheckrc file in the sirius-nse repo for configuration.
        run: |
          if [ -d "scripts" ] && [ "$(ls -A scripts/*.nse 2>/dev/null)" ]; then
            luacheck scripts/
          else
            echo "scripts/ directory not found or no .nse files present, skipping Lua linting."
          fi

      - name: Send repository_dispatch to Sirius main repo
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.MAIN_REPO_ACCESS_TOKEN }}
          repository: SiriusScan/Sirius
          event-type: submodule-update
          client-payload: '{ "submodule": "${{ github.repository }}", "commit_sha": "${{ github.sha }}", "ref": "${{ github.ref }}" }' 