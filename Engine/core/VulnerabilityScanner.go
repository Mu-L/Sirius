package core

import (
	"encoding/json"
	"log"

	"github.com/streadway/amqp"

	lib "github.com/0sm0s1z/Sirius-Scan/Engine/lib"
)

func failOnError(err error, msg string) {
	if err != nil {
		log.Fatalf("%s: %s", msg, err)
	}
}

// VulnerabilityScanner subscribes to the queue and listens for scan requests
// When a scan request is received, it will execute scans for each target up to the scan queue
func VulnerabilityScanner() {
	conn, err := amqp.Dial("amqp://guest:guest@rabbitmq:5672/")
	failOnError(err, "Failed to connect to RabbitMQ")
	defer conn.Close()

	ch, err := conn.Channel()
	failOnError(err, "Failed to open a channel")
	defer ch.Close()

	q, err := ch.QueueDeclare(
		"scan", // name
		false,  // durable
		false,  // delete when unused
		false,  // exclusive
		false,  // no-wait
		nil,    // arguments
	)
	failOnError(err, "Failed to declare a queue")

	msgs, err := ch.Consume(
		q.Name, // queue
		"",     // consumer
		true,   // auto-ack
		false,  // exclusive
		false,  // no-local
		false,  // no-wait
		nil,    // args
	)
	failOnError(err, "Failed to register a consumer")

	// Start Scanning each target in the queue
	forever := make(chan bool)

	go func() {
		for d := range msgs {
			log.Printf("Received a message: %s", d.Body)
			var targetMatrix lib.TargetMatrix
			json.Unmarshal(d.Body, &targetMatrix)
		}
	}()
	<-forever
}
