# Docker Compose Configuration for Production Environment
# Use with: docker compose -f docker-compose.yaml -f docker-compose.production.yaml --env-file environments/.env.production up -d

services:
  sirius-ui:
    image: ${IMAGE_REGISTRY:-ghcr.io/siriusscan}/sirius-ui:${IMAGE_TAG:-latest}
    build: null # Disable build, use pre-built images
    volumes: [] # Remove development volume mounts
    environment:
      - NODE_ENV=production
      - SKIP_ENV_VALIDATION=0 # Enable validation in production
      - SIRIUS_API_URL=${SIRIUS_API_URL:-http://sirius-api:9001}
      - NEXT_PUBLIC_SIRIUS_API_URL=${NEXT_PUBLIC_SIRIUS_API_URL:-http://localhost:9001}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-production-secret-change-this}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      # Use SQLite for authentication as defined in schema.prisma
      # - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-sirius-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-sirius}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID:-dummy_client_id}
      - DISCORD_CLIENT_SECRET=${DISCORD_CLIENT_SECRET:-dummy_client_secret}
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"

  sirius-api:
    image: ${IMAGE_REGISTRY:-ghcr.io/siriusscan}/sirius-api:${IMAGE_TAG:-latest}
    build: null # Disable build, use pre-built images
    volumes: [] # Remove development volume mounts
    environment:
      - GO_ENV=production
      - API_PORT=${API_PORT:-9001}
      - POSTGRES_HOST=${POSTGRES_HOST:-sirius-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-sirius}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - VALKEY_HOST=${VALKEY_HOST:-sirius-valkey}
      - VALKEY_PORT=${VALKEY_PORT:-6379}
      - RABBITMQ_URL=${RABBITMQ_URL:-amqp://guest:guest@sirius-rabbitmq:5672/}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  sirius-engine:
    image: ${IMAGE_REGISTRY:-ghcr.io/siriusscan}/sirius-engine:${IMAGE_TAG:-latest}
    build: null # Disable build, use pre-built images
    volumes: [] # Remove development volume mounts
    environment:
      - GO_ENV=production
      - ENGINE_MAIN_PORT=${ENGINE_MAIN_PORT:-5174}
      - GRPC_AGENT_PORT=${GRPC_AGENT_PORT:-50051}
      - POSTGRES_HOST=${POSTGRES_HOST:-sirius-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-sirius}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - VALKEY_HOST=${VALKEY_HOST:-sirius-valkey}
      - VALKEY_PORT=${VALKEY_PORT:-6379}
      - RABBITMQ_URL=${RABBITMQ_URL:-amqp://guest:guest@sirius-rabbitmq:5672/}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  sirius-postgres:
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-sirius}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"

  sirius-valkey:
    restart: unless-stopped
    volumes:
      - valkey_data_prod:/data
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.25"
        reservations:
          memory: 128M
          cpus: "0.1"

  sirius-rabbitmq:
    restart: unless-stopped
    volumes:
      - rabbitmq_data_prod:/var/lib/rabbitmq
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

volumes:
  postgres_data_prod:
    driver: local
  valkey_data_prod:
    driver: local
  rabbitmq_data_prod:
    driver: local

networks:
  default:
    name: sirius_production
    driver: bridge
