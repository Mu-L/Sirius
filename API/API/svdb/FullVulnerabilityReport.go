package svdbAPI

import (
	_ "encoding/json"
	_ "errors"
	_ "log"
	"net/http"
	_ "os"
	_ "os/exec"

	"github.com/gin-gonic/gin"

	//Internal Libraries
	siriusDB "github.com/0sm0s1z/Sirius-Scan/lib/db"
	//3rd Party Dependencies
)

type EnterpriseVulnerability struct {
	CVE  string
	Host []string
}

type EnterpriseCPE struct {
	CPE  siriusDB.CPEMatch
	Host []string
}

type EnterpriseVulnerabilityReport struct {
	CVEDataFormat       string
	CVEDataType         string
	CVEDataVersion      string
	CVEDataNumberOfCVEs string
	CVEDataTimestamp    string
	CVEItems            []siriusDB.CVEItem
	CVEDataMeta         siriusDB.CVEDataMeta
	Description         siriusDB.Description
	CPE                 siriusDB.Node
	CVSSV3              siriusDB.CVSSV3
	References          []string
	Tags                []string
	AffectedHosts 		[]string
}

// FullVulnerabilityReport responds with a report of vulnerability data related all hosts.
func FullVulnerabilityReport(c *gin.Context) {

	//Get hosts from database
	var hosts []siriusDB.SVDBHost
	hosts = siriusDB.GetHosts()

	//For each host, identify the CVEs
	var EnterpriseVulnerabilityList []EnterpriseVulnerability
	var cpeHostList []EnterpriseCPE
	for i := 0; i < len(hosts); i++ {
		var vuln EnterpriseVulnerability
		for j := 0; j < len(hosts[i].CVE); j++ {
			vuln.CVE = hosts[i].CVE[j]
			vuln.Host = append(vuln.Host, hosts[i].IP)
			EnterpriseVulnerabilityList = append(EnterpriseVulnerabilityList, vuln)
		}

		//Make CPE struct for each CPE with the host affected
		var cpeHost EnterpriseCPE
		for j := 0; j < len(hosts[i].CPE); j++ {
			cpeHost.CPE.CPE23URI = hosts[i].CPE[j]
			cpeHost.Host = append(cpeHost.Host, hosts[i].IP)

			//Check if the CPE is already in the list
			var found bool
			for k := 0; k < len(cpeHostList); k++ {
				if cpeHostList[k].CPE.CPE23URI == cpeHost.CPE.CPE23URI {
					cpeHostList[k].Host = append(cpeHostList[k].Host, hosts[i].IP)
					found = true
				}
			}
			if !found {
				cpeHostList = append(cpeHostList, cpeHost)
			}
		}
	}

	//For each CPE, identify the CVEs
	for j := 0; j < len(cpeHostList); j++ {
		var cveList []siriusDB.SVDBEntry
		cveList = MatchToCVE(cpeHostList[j].CPE)
		for k := 0; k < len(cveList); k++ {
			var vuln EnterpriseVulnerability
			vuln.CVE = cveList[k].CVEDataMeta.ID
			vuln.Host = cpeHostList[j].Host
			EnterpriseVulnerabilityList = append(EnterpriseVulnerabilityList, vuln)
		}
	}

	//Create a finding request for each CVE and add to EnterpriseVulnerabilityReport
	var VulnerabilityReport []EnterpriseVulnerabilityReport
	for i := 0; i < len(EnterpriseVulnerabilityList); i++ {
		var finding siriusDB.FindingRequest
		finding.CVE = append(finding.CVE, EnterpriseVulnerabilityList[i].CVE)
		var findingList []siriusDB.SVDBEntry
		findingList = siriusDB.GetFinding(finding)
		for j := 0; j < len(findingList); j++ {
			var report EnterpriseVulnerabilityReport

			//Update report with finding data
			report.CVEDataFormat = findingList[j].CVEDataFormat
			report.CVEDataType = findingList[j].CVEDataType
			report.CVEDataVersion = findingList[j].CVEDataVersion
			report.CVEDataNumberOfCVEs = findingList[j].CVEDataNumberOfCVEs
			report.CVEDataTimestamp = findingList[j].CVEDataTimestamp
			report.CVEDataMeta = findingList[j].CVEDataMeta
			report.CVEItems = findingList[j].CVEItems
			report.Description = findingList[j].Description
			report.CPE = findingList[j].CPE
			report.CVSSV3 = findingList[j].CVSSV3
			report.References = findingList[j].References
			report.Tags = findingList[j].Tags

			//Add affected hosts
			report.AffectedHosts = EnterpriseVulnerabilityList[i].Host
			VulnerabilityReport = append(VulnerabilityReport, report)
		}
	}

	c.IndentedJSON(http.StatusOK, VulnerabilityReport)
}
