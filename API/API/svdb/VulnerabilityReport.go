package svdbAPI

import (
	_ "encoding/json"
	_ "errors"
	"log"
	"net/http"
	_ "os"
	_ "os/exec"

	"github.com/gin-gonic/gin"

	//Internal Libraries
	hostAPI "github.com/0sm0s1z/Sirius-Scan/API/hosts"
	siriusDB "github.com/0sm0s1z/Sirius-Scan/lib/db"
	//3rd Party Dependencies
)

// VulnerabilityReport responds with a report of vulnerability data related to a given host.
func VulnerabilityReport(c *gin.Context) {

	var hostRequest siriusDB.SVDBHost

	if c.ShouldBind(&hostRequest) != nil {
		log.Println("Vulnerability Report Failed for: ", hostRequest.IP)
	}

	//Get the host data from the database
	var result siriusDB.SVDBHost
	result, err := hostAPI.GetHost(hostRequest)
	if err != nil {
		log.Println("Error retrieving result from DB")
	}

	//Collect the vulnerability data for each CVE
	var finding siriusDB.FindingRequest
	finding.CVE = result.CVE

	var findingList []siriusDB.SVDBEntry
	findingList = siriusDB.GetFinding(finding)

	//Collect the vulnerability data for each CPE
	var cpeList []siriusDB.SVDBEntry
	var cpe siriusDB.CPEMatch
	for i := 0; i < len(result.CPE); i++ {
		cpe.CPE23URI = result.CPE[i]
		cpeList = append(cpeList, MatchToCVE(cpe)...)

	}

	//Combine the two lists
	var combinedList []siriusDB.SVDBEntry
	combinedList = append(combinedList, findingList...)
	combinedList = append(combinedList, cpeList...)

	c.IndentedJSON(http.StatusOK, combinedList)
}
