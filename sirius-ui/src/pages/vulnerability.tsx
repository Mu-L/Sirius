import React, { useState, useEffect } from "react";
import { useRouter } from "next/router";

import Layout from "~/components/Layout";
import VulnerabilityIcon from "~/components/icons/VulnerabilityIcon";

import { api } from "~/utils/api";
import { CvssBox } from "~/components/vulnerabilityReport/CvssBox";
import { CpeBox } from "~/components/vulnerabilityReport/CpeBox";
import type {
  CveTag,
  LangString,
  Metrics,
  Reference,
  CveItem,
} from "~/server/api/routers/vulnerability";
import { SeverityGage } from "~/components/vulnerabilityReport/SeverityGauge";
import { Button } from "~/components/lib/ui/button";
import { ThreatBar } from "~/components/vulnerabilityReport/ThreatBar";
import ReactMarkdown from "react-markdown";

const Vulnerability = () => {
  const [view, setView] = useState<string>("summary");

  const router = useRouter();
  const vulnId = router.query.id as string;
  // const searchParams = useSearchParams();
  // const currentHost = searchParams.get("id");

  // const vulnId = "CVE-2017-0145";
  const {
    data: rawData,
    isLoading,
    isError,
  } = api.vulnerability.getVulnerability.useQuery(
    { id: vulnId },
    { enabled: vulnId !== null }
  );
  const vulnData = rawData ?? emptyCVEItem;

  const cvssScore =
    vulnData?.metrics?.cvssMetricV31?.[0]?.cvssData.baseScore ?? 0;

  const handleViewNavigator = (view: string) => {
    console.log(view);
    setView(view);
  };

  useEffect(() => {
    const isDark = window.localStorage.getItem("darkMode") === "true";
  }, []);

  if (isLoading) {
    return <div>Loading...</div>;
  }
  if (isError) {
    return <div>An error occurred loading host data.</div>;
  }

  return (
    <Layout>
      <div className="container relative z-20 mb-5 h-56">
        <div className="z-10 flex flex-row items-center">
          <div className=" mt-7 flex dark:fill-white">
            <VulnerabilityIcon width="35px" height="35px" fill="white" />
          </div>
          <h1 className="ml-3 mt-5 flex text-4xl font-extralight ">
            {vulnData?.id}
          </h1>
        </div>
        <div className="pt-6">
          <div className="flex flex-row">
            <div className="flex h-48 w-72 flex-col">
              <SeverityGage data={vulnData} />
            </div>
            <div className="font-roboto flex flex-row px-2 md:mt-6 md:gap-4">
              <CvssBox score={cvssScore} data={vulnData} />
              <CpeBox cve={vulnData} mobile={false} />
            </div>
          </div>
        </div>
        <div className="relative z-30">
          <div className="mb-4 flex gap-2">
            <Button
              variant={view === "summary" ? "secondary" : "default"}
              onClick={() => handleViewNavigator("summary")}
            >
              Summary
            </Button>
            <Button
              variant={view === "nvd-details" ? "secondary" : "default"}
              onClick={() => handleViewNavigator("nvd-details")}
            >
              NVD Details
            </Button>
          </div>

          {view === "summary" && <SummaryView cve={vulnData} />}
          {view === "nvd-details" && <NVDView cve={vulnData} />}
        </div>
      </div>
    </Layout>
  );
};

interface NVDViewProps {
  cve: CveItem;
}

export const NVDView: React.FC<NVDViewProps> = ({ cve }) => {
  const flattenStringArrays = (arrs: string[][]) =>
    arrs.map((arr) => arr.join(", ")).join("\n");

  /** Convert array of LangString => "en: Some text\nfr: Some text" */
  const flattenLangStrings = (langStrings: LangString[] = []) =>
    langStrings.map((ls) => `${ls.lang}: ${ls.value}`).join("\n");

  /** Convert references => each row's url, plus optional tags. */
  const flattenReferences = (refs: Reference[] = []) =>
    refs
      .map((ref) => {
        const tagString = ref.tags?.length ? ` [${ref.tags.join(", ")}]` : "";
        return `${ref.url}${tagString}`;
      })
      .join("\n");

  /** Convert cveTags => each row "sourceIdentifier: [tag1, tag2]" */
  const flattenCveTags = (cveTags: CveTag[] = []) =>
    cveTags
      .map((tag) => `${tag.sourceIdentifier}: ${tag.tags.join(", ")}`)
      .join("\n");

  /**
   * Flatten metrics. This can be as detailed or minimal as you want.
   * For brevity, we'll just show the baseScore + baseSeverity if available.
   */
  const flattenMetrics = (metrics?: Metrics) => {
    if (!metrics) return "";
    // For demonstration, let's handle just v3.1 metrics.
    // You could add more lines for v4.0, v3.0, v2, etc.
    const v31 = metrics.cvssMetricV31 ?? [];
    const lines = v31.map((m) => {
      const data = m.cvssData;
      return `Source: ${m.source}, Score: ${data.baseScore}, Severity: ${data.baseSeverity}`;
    });
    return lines.join("\n");
  };

  /** A generic table renderer for [string, string] pairs. */
  const renderTable = (headers: string[], data: string[][]) => {
    return (
      <tbody>
        {data.map((row, index) => (
          <tr
            key={index}
            className="h-14 border-b border-gray-300 dark:border-gray-600"
          >
            {headers.map((header, i) => (
              <td
                key={i}
                className="pr-4 text-sm text-gray-600 dark:text-gray-400"
              >
                {row[i]}
              </td>
            ))}
          </tr>
        ))}
      </tbody>
    );
  };

  // Build up your big array of [Attribute, Value] pairs.
  // Omit or rearrange as needed.
  const cveDetails: [string, string][] = [
    ["ID", cve.id],
    ["Severity", `${cve.metrics?.cvssMetricV31?.[0]?.cvssData.baseSeverity}`],
    ["CVSSv3 Score", `${cve.metrics?.cvssMetricV31?.[0]?.cvssData.baseScore}`],
    [
      "CPE",
      (cve.configurations ?? [])
        .map((config) => {
          return config.nodes
            .map((node) => {
              return (node.cpeMatch ?? [])
                .map((cpe) => `${cpe.criteria}`)
                .join(", ");
            })
            .join("\n");
        })
        .join("\n"),
    ],
    ["Source Identifier", cve.sourceIdentifier],
    ["Published", cve.published],
    ["Last Modified", cve.lastModified],
    ["Status", cve.vulnStatus],
    ["Evaluator Comment", cve.evaluatorComment ?? ""],
    ["Evaluator Solution", cve.evaluatorSolution ?? ""],
    ["Evaluator Impact", cve.evaluatorImpact ?? ""],
    ["CISA Exploit Add", cve.cisaExploitAdd ?? ""],
    ["CISA Action Due", cve.cisaActionDue ?? ""],
    ["CISA Required Action", cve.cisaRequiredAction ?? ""],
    ["CISA Vulnerability Name", cve.cisaVulnerabilityName ?? ""],
    ["Descriptions", flattenLangStrings(cve.descriptions)],
    ["Metrics", flattenMetrics(cve.metrics)],
    ["References", flattenReferences(cve.references)],
    ["Tags", flattenCveTags(cve.cveTags)],
    // Weaknesses => e.g. "source: Some source, type: Some type"
    [
      "Weaknesses",
      (cve.weaknesses ?? [])
        .map((w) => {
          const desc = flattenLangStrings(w.description);
          return `${w.source} [${w.type}]\n${desc}`;
        })
        .join("\n\n"),
    ],
    // Configurations => quick flatten
    // Vendor Comments => flatten
    [
      "Vendor Comments",
      (cve.vendorComments || [])
        .map(
          (vc) =>
            `${vc.organization}: ${vc.comment} [LastMod: ${vc.lastModified}]`
        )
        .join("\n"),
    ],
  ];

  return (
    <div>
      <div className="font-orbitron mt-6 pb-1 text-xs font-bold uppercase tracking-wider text-violet-100 text-opacity-70">
        NVD Details
      </div>
      <table className="w-full">
        {renderTable(["Attribute", "Value"], cveDetails)}
      </table>
    </div>
  );
};

const SummaryView = ({ cve }: { cve: CveItem }) => {
  const description =
    cve.descriptions?.[0]?.value ?? "No description available";

  return (
    <div className="py-3">
      <div className="font-orbitron pb-1 text-xs font-bold uppercase tracking-wider text-violet-100 text-opacity-70">
        Short Description
      </div>
      <div className="text-md font-extralight">
        <ReactMarkdown>{description}</ReactMarkdown>
      </div>
      <ThreatBar cve={cve} />
      <VulnerabilityReferences cve={cve} />
    </div>
  );
};

const VulnerabilityReferences = ({ cve }: { cve: CveItem }) => {
  return (
    <div>
      <div className="font-orbitron mt-6 pb-1 text-xs font-bold uppercase tracking-wider text-violet-100 text-opacity-70">
        References
      </div>
      <div className="text-md font-extralight">
        {cve.references?.map((ref) => (
          <ul key={ref.url}>
            <li className="ml-6 list-disc">
              <a href={ref.url} target="_blank" rel="noreferrer">
                {ref.url}
              </a>
            </li>
          </ul>
        ))}
      </div>
    </div>
  );
};

const emptyCVEItem: CveItem = {
  id: "",
  sourceIdentifier: "",
  vulnStatus: "",
  published: "",
  lastModified: "",
  cveTags: [],
  descriptions: [],
  references: [],
  weaknesses: [],
  configurations: [],
  vendorComments: [],
  metrics: {
    cvssMetricV40: [],
    cvssMetricV31: [],
    cvssMetricV30: [],
    cvssMetricV2: [],
  },
};

export default Vulnerability;
