import React, { useState, useEffect } from "react";
import { useRouter } from "next/router";

import Layout from "~/components/Layout";
import VulnerabilityIcon from "~/components/icons/VulnerabilityIcon";

import { api } from "~/utils/api";
import { CvssBox } from "~/components/vulnerabilityReport/CvssBox";
import { CpeBox } from "~/components/vulnerabilityReport/CpeBox";
import { type CveItem } from "~/server/api/routers/vulnerability";
import { SeverityGage } from "~/components/vulnerabilityReport/SeverityGauge";
import { Button } from "~/components/lib/ui/button";

const Vulnerability = () => {
  const [darkMode, setDarkMode] = useState(false);
  const [view, setView] = useState<string>("summary");
  
  const hexgradClass = darkMode ? "hexgrad" : "light-hexgrad";

  // const router = useRouter();
  // const vulnId = router.query.id as string;
  // const searchParams = useSearchParams();
  // const currentHost = searchParams.get("id");

  const vulnId = "CVE-2019-1010218"
  const {
    data: rawData,
    isLoading,
    isError,
  } = api.vulnerability.getVulnerability.useQuery(
    { id: vulnId as string },
    { enabled: vulnId !== null }
  );
  const vulnData = rawData ?? emptyCVEItem;
  
  console.log(vulnData)

  const description =
    vulnData?.descriptions?.[0]?.value ?? "No description available";
  const cvssScore =
    vulnData?.metrics?.cvssMetricV31?.[0]?.cvssData.baseScore ?? 0;

  const handleViewNavigator = (view: string) => {
    console.log(view);
    setView(view);
  };
  
  
  useEffect(() => {
    const isDark = window.localStorage.getItem("darkMode") === "true";
    setDarkMode(isDark);
  }, []);
  
  if (isLoading) {
    return <div>Loading...</div>;
  }
  if (isError) {
    return <div>An error occurred loading host data.</div>;
  }

  return (
    <Layout>
      <div className="relative z-20 mb-5 h-56">
        <div className={hexgradClass} key={hexgradClass}></div>
        <div className="z-10 flex flex-row items-center">
          <div className="ml-4 mt-7 flex dark:fill-white">
            <VulnerabilityIcon width="35px" height="35px" fill="white" />
          </div>
          <h1 className="ml-3 mt-5 flex text-4xl font-extralight ">
            {vulnData?.id}
          </h1>
        </div>
        <div className="py-6">
          <div className="flex flex-row">
            <div className="flex h-48 w-72 flex-col">
              <SeverityGage />
            </div>
            <div className="font-roboto flex flex-row px-2 md:mt-6 md:gap-4">
              <CvssBox score={cvssScore} />
              <CpeBox cve={vulnData} mobile={false} />
            </div>
          </div>
        </div>
        <div className="ml-4 py-3">
          <div className="flex gap-2">
            <Button
              variant={view === "summary" ? "secondary" : "default"}
              onClick={() => handleViewNavigator("summary")}
            >
              Summary
            </Button>
            <Button
              variant={view === "NVD Details" ? "secondary" : "default"}
              onClick={() => handleViewNavigator("NVD Details")}
            >
              NVD Details
            </Button>
          </div>

          {view === "vulnerabilities" && (
            <VulnerabilityDataTable columns={columns} data={vulnData} />
          )}
          {view === "users" && (
            <UserView userHeaders={userHeaders} userData={userData} />
          )}
          {view === "host-details" && <HostDetails host={host} />}
          {view === "terminal" && <Terminal />}
        </div> 
        
        
        
        <div className="py-3">
          <div className="font-orbitron pb-1 text-xs font-bold uppercase tracking-wider text-violet-100 text-opacity-70">
            Short Description
          </div>
          <div className="text-md font-extralight">{description}</div>
        </div>
      </div>
    </Layout>
  );
};

const emptyCVEItem: CveItem = {
  id: "",
  sourceIdentifier: "",
  vulnStatus: "",
  published: "",
  lastModified: "",
  cveTags: [],
  descriptions: [],
  references: [],
  weaknesses: [],
  configurations: [],
  vendorComments: [],
  metrics: {
    cvssMetricV40: [],
    cvssMetricV31: [],
    cvssMetricV30: [],
    cvssMetricV2: [],
  },
};

export default Vulnerability;
